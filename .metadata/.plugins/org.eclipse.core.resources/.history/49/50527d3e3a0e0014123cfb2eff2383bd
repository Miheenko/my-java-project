package com.example.tests;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.thoughtworks.xstream.XStream;

public class ContactDataGenerator {

	private static String month[] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
	
	public static void main(String[] args) throws IOException {
		if (args.length < 3){
			System.out.println("Please specify parameters: <amount of test data> <file> <format>");
			return;
		}
		int amount = Integer.parseInt(args[0]);
		File file = new File(args[1]);
		String format = args[2];
		
		if (file.exists()){
			System.out.println("File exists, please remove it manually: " + file);
			return;
		}
		
		List<AddressData> contacts = generateRandomContacts(amount);
        if ("csv".equals(format)) {
	     saveContactsToCsvFile(contacts, file);
        } else if ("xml".equals(format)){
         saveContactsToXmlFile(contacts, file);	
        } else {
        	System.out.println("Unknown format" + format);
        	return;
        }
	}

	private static void saveContactsToXmlFile(List<AddressData> contacts,
			File file) throws IOException {
		XStream xstream = new XStream();
		xstream.alias("contacts", AddressData.class);
		String xml = xstream.toXML(contacts);
		FileWriter writer = new FileWriter(file);
		writer.write(xml);
		writer.close();
		
		
	}

	private static void saveContactsToCsvFile(List<AddressData> contacts,
			File file) throws IOException {
		FileWriter writer = new FileWriter(file);
		for (AddressData address : contacts) {
			writer.write(address.getAddressFirst() + "," + address.getAddressSecond() + "," + address.getBirthDay() + 
					"," +address.getBirthMonth() + "," + address.getBirthYear() + "," + address.getEmail() + "," + address.getFirstName() + ","
		+ address.getLastName() + "," + address.getNewGroup() + "," + address.getPhoneHome() + "," + address.getPhoneHomeSecond() + ","
					+ address.getPhoneMobile() + "," + address.getPhoneWork() + "\n");
		}
		writer.close();
		
	}
	
	  public static List<AddressData> loadContactsFromCsvFile(File file) throws IOException {
		  List<AddressData> list = new ArrayList<AddressData>();
		  FileReader reader = new FileReader(file);
		  
		  reader.close();
		  return list;
		}

	public static List<AddressData> generateRandomContacts(int amount) {
List<AddressData> list = new ArrayList<AddressData>();
		
		for (int i = 0; i < amount; i++){
			AddressData address = new AddressData()
			.withFirstName(generateRandomString())
			.withLastName(generateRandomString())
			.withAddressFirst(generateRandomString())
			.withPhoneHome(generateRandomString())
			.withPhoneMobile(generateRandomString())
			.withPhoneWork(generateRandomString())
			.withEmail(generateRandomString())
			.withBirthDay(Integer.toString(generateRandomString(15, 7)))
			.withBirthMonth(month[generateRandomString(12,1)])
			.withBirthYear(Integer.toString(generateRandomString(100,80) + 1900))
			.withNewGroup("")
			.withAddressSecond(generateRandomString())
			.withPhoneHomeSecond(generateRandomString());
			System.out.println(address);
			
			list.add(address);
		}
			return list;
	}
	
	public static String generateRandomString(){
		Random rnd = new Random();
		if (rnd.nextInt(3) == 0) {
			return "";
		} else {
			return "test" + rnd.nextInt();
		}
	}
	
	
	public static int generateRandomString(int limit, int delta){
		Random rnd = new Random();
		int res = rnd.nextInt(limit);
		if (res == 0){
			res = delta;
		}
		return res;
	}

}
